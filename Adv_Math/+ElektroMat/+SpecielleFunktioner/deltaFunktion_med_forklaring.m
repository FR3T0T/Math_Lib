function [F, forklaringsOutput] = deltaFunktion_med_forklaring(t0, t, s)
    % DELTAFUNKTION_MED_FORKLARING Forklarer Dirac's delta-funktion og dens Laplacetransformation
    %
    % Syntax:
    %   [F, forklaringsOutput] = ElektroMatBibTrinvis.deltaFunktion_med_forklaring(t0, t, s)
    %
    % Input:
    %   t0 - tidspunkt for impulsen
    %   t - tidsvariabel (symbolsk)
    %   s - Laplace-variabel (symbolsk)
    % 
    % Output:
    %   F - Laplacetransformationen af delta(t-t0)
    %   forklaringsOutput - Struktur med forklaringstrin
    
    % Konverter t0 til streng
    try
        t0_str = symbolToString(t0);
    catch
        t0_str = char(t0);
    end
    
    % Starter forklaring
    forklaringsOutput = ElektroMatBibTrinvis.startForklaring('Diracs Delta-funktion');
    
    forklaringsOutput = ElektroMatBibTrinvis.tilfoejTrin(forklaringsOutput, 1, ...
        'Definér delta-funktionen', ...
        'Diracs delta-funktion er en generaliseret funktion, der repræsenterer en uendelig smal og høj impuls.', ...
        ['δ(t-' t0_str ') = { ∞ for t = ' t0_str ', 0 for t ≠ ' t0_str ' }']);
    
    forklaringsOutput = ElektroMatBibTrinvis.tilfoejTrin(forklaringsOutput, 2, ...
        'Egenskaber for delta-funktionen', ...
        ['Følgende egenskaber gælder for delta-funktionen:\n' ...
        '1. ∫ δ(t-' t0_str ') dt = 1 (areal = 1)\n' ...
        '2. ∫ f(t)·δ(t-' t0_str ') dt = f(' t0_str ') (sampling-egenskab)\n' ...
        '3. δ(t) = d/dt[u(t)] (differentialet af enhedstrinfunktionen)'], ...
        '');
    
    forklaringsOutput = ElektroMatBibTrinvis.tilfoejTrin(forklaringsOutput, 3, ...
        'Anvend definitionen for Laplacetransformationen', ...
        'Vi anvender definitionen af Laplacetransformationen på delta-funktionen.', ...
        ['L{δ(t-' t0_str ')} = ∫ δ(t-' t0_str ')·e^(-st) dt fra 0- til ∞']);
    
    forklaringsOutput = ElektroMatBibTrinvis.tilfoejTrin(forklaringsOutput, 4, ...
        'Udnyt sampling-egenskaben', ...
        ['Ved at bruge sampling-egenskaben med f(t) = e^(-st), får vi:'], ...
        ['∫ δ(t-' t0_str ')·e^(-st) dt = e^(-s·' t0_str ')']);
    
    % Resultat afhænger af t0
    t0_val = double(t0);
    if t0_val < 0
        F = 0;
        forklaringsOutput = ElektroMatBibTrinvis.tilfoejTrin(forklaringsOutput, 5, ...
            'Vurdér intervallet', ...
            ['Da ' t0_str ' < 0, ligger delta-impulsen uden for integrationsområdet [0,∞).'], ...
            ['L{δ(t-' t0_str ')} = 0 for ' t0_str ' < 0']);
    else
        F = exp(-s*t0);
        forklaringsOutput = ElektroMatBibTrinvis.tilfoejTrin(forklaringsOutput, 5, ...
            'Beregn transformationen', ...
            ['Da ' t0_str ' ≥ 0, har vi:'], ...
            ['L{δ(t-' t0_str ')} = e^(-s·' t0_str ')']);
    end
    
    % Specielt tilfælde hvis t0 = 0
    if t0_val == 0
        forklaringsOutput = ElektroMatBibTrinvis.tilfoejTrin(forklaringsOutput, 6, ...
            'Specielt tilfælde for t0 = 0', ...
            'For t0 = 0 har vi delta-funktionen centreret i 0.', ...
            'L{δ(t)} = 1');
    end
    
    % Afslut
    F_str = symbolToString(F);
    forklaringsOutput = ElektroMatBibTrinvis.afslutForklaring(forklaringsOutput, ...
        ['L{δ(t-' t0_str ')} = ' F_str]);
end